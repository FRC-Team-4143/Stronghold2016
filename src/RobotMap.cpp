// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<SpeedController> RobotMap::leftFront;
std::shared_ptr<SpeedController> RobotMap::rightRear;
std::shared_ptr<SpeedController> RobotMap::rightFront;
std::shared_ptr<SpeedController> RobotMap::leftRear;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

PIDController*     RobotMap::driveTrainFrontLeft = nullptr;
    SpeedController*   RobotMap::driveTrainFrontLeftDrive = nullptr;
    AnalogChannelVolt* RobotMap::driveTrainFrontLeftPos = nullptr;
    SpeedController*   RobotMap::driveTrainFrontLeftSteer = nullptr;

    PIDController*     RobotMap::driveTrainFrontRight = nullptr;
    SpeedController*   RobotMap::driveTrainFrontRightDrive = nullptr;
    AnalogChannelVolt* RobotMap::driveTrainFrontRightPos = nullptr;
    SpeedController*   RobotMap::driveTrainFrontRightSteer = nullptr;

    PIDController*     RobotMap::driveTrainRearLeft = nullptr;
    SpeedController*   RobotMap::driveTrainRearLeftDrive = nullptr;
    AnalogChannelVolt* RobotMap::driveTrainRearLeftPos = nullptr;
    SpeedController*   RobotMap::driveTrainRearLeftSteer = nullptr;

    PIDController*     RobotMap::driveTrainRearRight = nullptr;
    SpeedController*   RobotMap::driveTrainRearRightDrive = nullptr;
    AnalogChannelVolt* RobotMap::driveTrainRearRightPos = nullptr;
    SpeedController*   RobotMap::driveTrainRearRightSteer = nullptr;

    I2C* RobotMap::i2c = nullptr;

    SerialPort* RobotMap::serialPort = nullptr;

    #ifdef USE_NAVX
    KauaiNavX::AHRS* RobotMap::imu = nullptr;
    #else
    AHRS* RobotMap::imu = nullptr;
    #endif

#define CONTINUOUS true
#define P 0.8
#define I 0.0
#define D 0.1
#define F 0.0
#define POTMIN 0.0
#define POTMAX 5.0
#define STEERPOW  1.0
#define TOLERANCE 0.2
#define PERIOD .02
#define RATIO 1
#define ELEVATOR_TOLERANCE 2

#define TESTSWERVE 0
#if TESTSWERVE
	#define FLD 2
	#define FLP 2
	#define FLS 6

	#define FRD 3
	#define FRP 0
	#define FRS 5

	#define RLD 1
	#define RLP 3
	#define RLS 7

	#define RRD 0
	#define RRP 1
	#define RRS 4

	#define TOTE1_MOTOR   8
	#define TOTE1_POS_A   0
	#define TOTE1_POS_B   1
	#define TOTE1_POS_REV true

	#define TOTE2_MOTOR   9
	#define TOTE2_POS_A   2
	#define TOTE2_POS_B   3
	#define TOTE2_POS_REV false

	#define TOTE3_MOTOR   10
	#define TOTE3_POS_A   4
	#define TOTE3_POS_B   5
	#define TOTE3_POS_REV false

	#define BIN_MOTOR   11
	#define BIN_POS_A   6
	#define BIN_POS_B   7
	#define BIN_POS_REV false

	#define BINARM_MOTOR   8
	#define BINARM_POS_A   8
	#define BINARM_POS_B   9
	#define BINARM_POS_REV false
#else
	#define FLD 2
	#define FLP 2
	#define FLS 2

	#define FRD 1
	#define FRP 1
	#define FRS 4

	#define RLD 3
	#define RLP 3
	#define RLS 1

	#define RRD 0
	#define RRP 0
	#define RRS 3

	#define TOTE1_MOTOR   4
	#define TOTE1_POS_A   0
	#define TOTE1_POS_B   1
	#define TOTE1_POS_REV true
	#define TOTE1_MOTOR_REV false

	#define TOTE2_MOTOR   5
	#define TOTE2_POS_A   2
	#define TOTE2_POS_B   3
	#define TOTE2_POS_REV true
	#define TOTE2_MOTOR_REV true

	#define TOTE3_MOTOR   6
	#define TOTE3_POS_A   4
	#define TOTE3_POS_B   5
	#define TOTE3_POS_REV false
	#define TOTE3_MOTOR_REV true

	#define TOTE4_MOTOR   7
	#define TOTE4_POS_A   6
	#define TOTE4_POS_B   7
	#define TOTE4_POS_REV false
	#define TOTE4_MOTOR_REV false

	#define BINARM_MOTOR   8
	#define BINARM_POS_A   8
	#define BINARM_POS_B   9
	#define BINARM_POS_REV false
	#define BINARM_MOTOR_REV false
#endif

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    LiveWindow *lw = LiveWindow::GetInstance();

    //serialPort = new SerialPort(57600, SerialPort::kOnboard);
    imu = new AHRS(SerialPort::Port::kUSB);//serialPort, 100);

    driveTrainFrontLeftDrive = new Victor(FLD);
	driveTrainFrontLeftPos   = new AnalogChannelVolt(FLP, true, RATIO);
	driveTrainFrontLeftSteer = new CANTalon(FLS);
	driveTrainFrontLeft      = new PIDController(P, I, D, F, driveTrainFrontLeftPos, driveTrainFrontLeftSteer, PERIOD);
	driveTrainFrontLeft->SetContinuous(CONTINUOUS);
	driveTrainFrontLeft->SetAbsoluteTolerance(TOLERANCE);
	driveTrainFrontLeft->SetInputRange(POTMIN, POTMAX);
	driveTrainFrontLeft->SetOutputRange(-STEERPOW, STEERPOW);

	driveTrainFrontRightDrive = new Victor(FRD);
	driveTrainFrontRightPos   = new AnalogChannelVolt(FRP, true, RATIO);
	driveTrainFrontRightSteer = new CANTalon(FRS);
	driveTrainFrontRight      = new PIDController(P, I, D, F, driveTrainFrontRightPos, driveTrainFrontRightSteer, PERIOD);
	driveTrainFrontRight->SetContinuous(CONTINUOUS);
	driveTrainFrontRight->SetAbsoluteTolerance(TOLERANCE);
	driveTrainFrontRight->SetInputRange(POTMIN, POTMAX);
	driveTrainFrontRight->SetOutputRange(-STEERPOW, STEERPOW);

	driveTrainRearLeftDrive = new Victor(RLD);
	driveTrainRearLeftPos   = new AnalogChannelVolt(RLP, true, RATIO);
	driveTrainRearLeftSteer = new CANTalon(RLS);
	driveTrainRearLeft      = new PIDController(P, I, D, F, driveTrainRearLeftPos, driveTrainRearLeftSteer, PERIOD);
	driveTrainRearLeft->SetContinuous(CONTINUOUS);
	driveTrainRearLeft->SetAbsoluteTolerance(TOLERANCE);
	driveTrainRearLeft->SetInputRange(POTMIN, POTMAX);
	driveTrainRearLeft->SetOutputRange(-STEERPOW, STEERPOW);

	driveTrainRearRightDrive = new Victor(RRD);
	driveTrainRearRightPos   = new AnalogChannelVolt(RRP, true, RATIO);
	driveTrainRearRightSteer = new CANTalon(RRS);
	driveTrainRearRight      = new PIDController(P, I, D, F, driveTrainRearRightPos, driveTrainRearRightSteer, PERIOD);
	driveTrainRearRight->SetContinuous(CONTINUOUS);
	driveTrainRearRight->SetAbsoluteTolerance(TOLERANCE);
	driveTrainRearRight->SetInputRange(POTMIN, POTMAX);
	driveTrainRearRight->SetOutputRange(-STEERPOW, STEERPOW);

    i2c = new I2C((I2C::Port) 1, 0x04);

    leftFront.reset(new Talon(8));
    lw->AddActuator("Shooter", "Shooter Motor 1", std::static_pointer_cast<Talon>(leftFront));
    
    rightRear.reset(new Talon(7));
    lw->AddActuator("Shooter", "Shooter Motor 2", std::static_pointer_cast<Talon>(rightRear));
    
    rightFront.reset(new Talon(5));
    lw->AddActuator("Shooter", "Shooter Motor 3", std::static_pointer_cast<Talon>(rightFront));
    
    leftRear.reset(new Talon(6));
    lw->AddActuator("Shooter", "Shooter Motor 4", std::static_pointer_cast<Talon>(leftRear));
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
